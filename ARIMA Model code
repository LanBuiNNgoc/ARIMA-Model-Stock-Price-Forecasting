from AlgorithmImports import *

class OilShortSellingAlgorithm(QCAlgorithm):
    def Initialize(self):
        self.SetStartDate(2021, 1, 1)  # Set Start Date
        self.SetEndDate(2023, 1, 1)    # Set End Date
        self.SetCash(100000)           # Set Strategy Cash
        # Add the oil stock and set leverage
        oil_stock_security = self.AddEquity('XOM', Resolution.Daily)
        oil_stock_security.SetLeverage(2.0)
        self.oil_stock = oil_stock_security.Symbol
       
        # Schedule the volatility update at the start of each month
        self.Schedule.On(self.DateRules.MonthStart(self.oil_stock), self.TimeRules.AfterMarketOpen(self.oil_stock), self.UpdateVolatility)
        # Schedule the trading logic to run every Monday, 10 minutes after market open
        self.Schedule.On(self.DateRules.Every(DayOfWeek.Monday), self.TimeRules.AfterMarketOpen(self.oil_stock, 10), self.TradeLogic)
       
        self.volatility = 0.0
        self.selling_phase = 0

    def UpdateVolatility(self):
  # Calculate the rolling 30-day volatility
        history = self.History(self.oil_stock, 30, Resolution.Daily)
        if not history.empty:
            daily_returns = history.loc[self.oil_stock].close.pct_change().dropna()
            self.volatility = daily_returns.std() * (252 ** 0.5)  # Annualize the volatility

    def TradeLogic(self):
        # Execute trading logic based on the current phase and market signals
        if self.IsBearishSignal():
            if self.selling_phase == 0:
                self.StartShorting()
            elif self.selling_phase <= 5:
                self.ContinueShorting()
        elif self.IsBullishSignal() and self.selling_phase > 0:
            self.CoverShorts()

    def IsBearishSignal(self):
        # Define a bearish signal based on volatility
        return self.volatility > 0.2

    def IsBullishSignal(self):
        # Define a bullish signal based on volatility
        return self.volatility < 0.1

    def StartShorting(self):
        # Start short selling by selling a portion of the portfolio value in the oil stock
        quantity = self.CalculateOrderQuantity(self.oil_stock, -0.15)
        self.Short(self.oil_stock, quantity)
        self.selling_phase = 1

    def ContinueShorting(self):
        # Continue short selling in increments, without exceeding 5 selling phases
        additional_percent = -0.15 - (self.selling_phase * 0.03)  # Decrease position size in subsequent phases
        if additional_percent > 0:
 quantity = self.CalculateOrderQuantity(self.oil_stock, additional_percent)
            self.Short(self.oil_stock, quantity)
            self.selling_phase += 1

    def CoverShorts(self):
        # Cover all shorts when a bullish signal is detected
        self.Liquidate(self.oil_stock)
        self.selling_phase = 0

    def OnData(self, data):
        # Required method but not used in this strategy
        pass

    def Short(self, symbol, quantity):
        # Place a short order, ensuring no existing long positions
        if self.Portfolio[symbol].Quantity > 0:
            self.Liquidate(symbol)
        if quantity != 0:
            self.Order(symbol, -quantity)
